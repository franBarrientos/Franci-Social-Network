# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type UserInfoEntityGraphqlDto {
  id: Int!
  name: String!
}

type LikeEntityGraphql {
  id: Int!
  user: UserInfoEntityGraphqlDto!
}

type CommentEntityGraphql {
  id: Int!
  user: UserInfoEntityGraphqlDto!
  createdAt: DateTime
  updatedAt: DateTime
  text: String
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type PostEntityGraphql {
  id: Int!
  title: String!
  img: String!
  likes: [LikeEntityGraphql!]
  comments: [CommentEntityGraphql!]
  createdAt: DateTime
  updatedAt: DateTime
}

type FollowerEntityGraphql {
  id: Int!
  user: UserInfoEntityGraphqlDto
}

type UserEntityGraphql {
  id: Int!
  name: String!
  email: String!
  posts: [PostEntityGraphql!]
  followers: [FollowerEntityGraphql!]
  followings: [FollowerEntityGraphql!]
  img: String
}

type Query {
  getAllUsers: [UserEntityGraphql!]!
  getOneUserById(id: Int!): UserEntityGraphql!
  getAllFollowingPosts(id: Int!): [PostEntityGraphql!]!
  getPostById(id: Int!): PostEntityGraphql!
}

type Mutation {
  createUser(userToCreate: UserInputGraphql!): UserEntityGraphql!
  updateUser(id: Int!, dataToUpdate: UserUpdateInputGraphql!): UserEntityGraphql!
  deleteUser(id: Int!): Boolean!
  createPost(postToCreate: PostInputGraphql!): PostEntityGraphql!
  updatePost(id: Int!, dataToUpdate: PostUpdateInputGraphql!): PostEntityGraphql!
  deletePost(id: Int!): Boolean!
  createLike(likeAddDto: LikeInputGraphql!): LikeEntityGraphql!
  deleteLike(idUser: Int!, idPost: Int!): Boolean!
  createFollower(followerAddDto: FollowerInputGraphql!): FollowerEntityGraphql!
  deleteFollower(idUser: Int!, idFollowed: Int!): Boolean!
  createComment(commentAddDto: CommentInputGraphql!): CommentEntityGraphql!
  updateComment(commentId: Int!, commentUpdated: String!): CommentEntityGraphql!
  deleteComment(idComment: Int!): Boolean!
}

input UserInputGraphql {
  name: String!
  email: String!
  password: String!
  img: String!
}

input UserUpdateInputGraphql {
  name: String
  email: String
  password: String
  img: String
}

input PostInputGraphql {
  img: String!
  title: String!
  userId: Int!
}

input PostUpdateInputGraphql {
  img: String
  title: String
  userId: Int
}

input LikeInputGraphql {
  post: Int!
  user: Int!
}

input FollowerInputGraphql {
  followedUserId: Int!
  followerUserId: Int!
}

input CommentInputGraphql {
  postId: Int!
  text: String!
  userId: Int!
}